import unittest
from unittest.mock import patch

from conventional_commits.compile_release_notes import ReleaseNoteCompiler


MOCK_GIT_LOG = """REF: Merge commit message checker modules| (HEAD -> refactor/test-release-notes-generator, origin/refactor/test-release-notes-generator)
MRG: Merge pull request #3 from octue/feature/add-other-conventional-commit-ci-components|
CHO: Remove hook installation from branch| (tag: 0.0.3, origin/main, origin/HEAD, main)
ENH: Support getting versions from poetry and npm|
FIX: Fix semantic version script; add missing config|
"""

EXPECTED_LAST_PULL_REQUEST_RELEASE_NOTES_WITH_NON_GENERATED_SECTION = "\n".join(
    [
        "BLAH BLAH BLAH",
        "<!--- START AUTOGENERATED NOTES --->",
        "## Contents",
        "",
        "### Refactoring",
        "- [x] Merge commit message checker modules",
        "",
        "<!--- END AUTOGENERATED NOTES --->",
        "YUM YUM YUM",
    ]
)


class TestReleaseNoteCompiler(unittest.TestCase):
    GIT_LOG_METHOD_PATH = "conventional_commits.compile_release_notes.ReleaseNoteCompiler._get_git_log"
    GET_PR_DESCRIPTION_PATH = (
        "conventional_commits.compile_release_notes.ReleaseNoteCompiler._get_current_pull_request_description"
    )
    MOCK_PULL_REQUEST_URL = "https://api.github.com/repos/blah/my-repo/pulls/11"

    def test_unsupported_stop_point_results_in_error(self):
        """Test that using an unsupported stop point results in a ValueError."""
        with self.assertRaises(ValueError):
            ReleaseNoteCompiler(stop_point="blah", pull_request_url="")

    def test_skip_release_notes_auto_generations(self):
        """Test that release notes autogeneration is skipped if the skip indicator is present in the previous notes."""
        previous_notes = (
            "BLAH BLAH BLAH\n<!--- START AUTOGENERATED NOTES --->\n<!--- END AUTOGENERATED NOTES --->YUM YUM YUM"
            "<!--- SKIP AUTOGENERATED NOTES --->"
        )

        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=previous_notes):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        self.assertEqual(release_notes, previous_notes)

    def test_last_release_stop_point(self):
        """Test generating release notes that stop at the last release."""
        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=""):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_RELEASE", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Refactoring",
                "- [x] Merge commit message checker modules",
                "",
                "### Other",
                "- [x] Merge pull request #3 from octue/feature/add-other-conventional-commit-ci-components",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
            ]
        )

        self.assertEqual(release_notes, expected)

    def test_last_pull_request_stop_point(self):
        """Test generating release notes that stop at the last pull request merge."""
        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=""):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Refactoring",
                "- [x] Merge commit message checker modules",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
            ]
        )

        self.assertEqual(release_notes, expected)

    def test_with_previous_release_notes_missing_autogeneration_markers(self):
        """Test that previous release notes are not overwritten when the autogeneration markers are missing."""
        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value="BLAH BLAH BLAH"):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "BLAH BLAH BLAH",
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Refactoring",
                "- [x] Merge commit message checker modules",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
            ]
        )

        self.assertEqual(release_notes, expected)

    def test_with_previous_release_notes_with_empty_autogenerated_section(self):
        """Test that text outside the autogeneration markers in previous release notes is not overwritten when the
        autogenerated section is empty.
        """
        previous_notes = (
            "BLAH BLAH BLAH\n<!--- START AUTOGENERATED NOTES --->\n<!--- END AUTOGENERATED NOTES --->YUM YUM YUM"
        )

        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=previous_notes):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        self.assertEqual(release_notes, EXPECTED_LAST_PULL_REQUEST_RELEASE_NOTES_WITH_NON_GENERATED_SECTION)

    def test_with_previous_release_notes_with_other_text_on_autogeneration_markers_lines(self):
        """Test that text outside but on the same line as the autogeneration markers in previous release notes is not
        overwritten when the autogenerated section is empty.
        """
        previous_notes = (
            "BLAH BLAH BLAH<!--- START AUTOGENERATED NOTES --->\n<!--- END AUTOGENERATED NOTES --->YUM YUM YUM"
        )

        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=previous_notes):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        self.assertEqual(release_notes, EXPECTED_LAST_PULL_REQUEST_RELEASE_NOTES_WITH_NON_GENERATED_SECTION)

    def test_autogenerated_section_gets_overwritten(self):
        """Test that text enclosed by the autogeneration markers is overwritten."""
        previous_notes = (
            "<!--- START AUTOGENERATED NOTES --->\nBAM BAM BAM\nWAM WAM WAM\n<!--- END AUTOGENERATED NOTES --->"
        )

        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=previous_notes):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Refactoring",
                "- [x] Merge commit message checker modules",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
            ]
        )

        self.assertEqual(release_notes, expected)

    def test_autogenerated_section_gets_overwritten_but_text_outside_does_not(self):
        """Test that text outside a non-empty autogenerated section is not overwritten."""
        previous_notes = "BLAH BLAH BLAH\n<!--- START AUTOGENERATED NOTES --->\nBAM BAM BAM<!--- END AUTOGENERATED NOTES --->YUM YUM YUM"

        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=previous_notes):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        self.assertEqual(release_notes, EXPECTED_LAST_PULL_REQUEST_RELEASE_NOTES_WITH_NON_GENERATED_SECTION)

    def test_commit_messages_in_non_standard_format_are_left_uncategorised(self):
        """Test that commit messages in a non-standard format are put under an uncategorised heading."""
        mock_git_log = "\n".join(["This is not in the right format|", "FIX: Fix a bug|"])

        with patch(self.GIT_LOG_METHOD_PATH, return_value=mock_git_log):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=""):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Fixes",
                "- [x] Fix a bug",
                "",
                "### Uncategorised!",
                "- [x] This is not in the right format",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
            ]
        )

        self.assertEqual(release_notes, expected)

    def test_commit_messages_with_unrecognised_commit_codes_are_categorised_as_other(self):
        """Test that commit messages with an unrecognised commit code are categorised under "other"."""
        mock_git_log = "\n".join(["BAM: An unrecognised commit code|", "FIX: Fix a bug|"])

        with patch(self.GIT_LOG_METHOD_PATH, return_value=mock_git_log):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=""):
                release_notes = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Fixes",
                "- [x] Fix a bug",
                "",
                "### Other",
                "- [x] An unrecognised commit code",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
            ]
        )

        self.assertEqual(release_notes, expected)

    def test_updating_release_notes_works_and_does_not_add_extra_newlines_after_autogenerated_section(self):
        """Test that updating release notes that were produced by the release notes compiler previously works (i.e. the
        new commits are categorised and formatted properly) and does not add extra newlines under the autogenerated
        section.
        """
        previous_notes = (
            "BLAH BLAH BLAH\n<!--- START AUTOGENERATED NOTES ---><!--- END AUTOGENERATED NOTES --->YUM YUM YUM"
        )

        with patch(self.GIT_LOG_METHOD_PATH, return_value=MOCK_GIT_LOG):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=previous_notes):
                release_notes_1 = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        # Add a new commit to the git log.
        updated_mock_git_log = "FIX: Fix a bug|\n" + MOCK_GIT_LOG

        # Run the compiler on the new git log to update the previous set of release notes.
        with patch(self.GIT_LOG_METHOD_PATH, return_value=updated_mock_git_log):
            with patch(self.GET_PR_DESCRIPTION_PATH, return_value=release_notes_1):
                release_notes_2 = ReleaseNoteCompiler(
                    stop_point="LAST_PULL_REQUEST", pull_request_url=self.MOCK_PULL_REQUEST_URL
                ).compile_release_notes()

        expected = "\n".join(
            [
                "BLAH BLAH BLAH",
                "<!--- START AUTOGENERATED NOTES --->",
                "## Contents",
                "",
                "### Fixes",
                "- [x] Fix a bug",
                "",
                "### Refactoring",
                "- [x] Merge commit message checker modules",
                "",
                "<!--- END AUTOGENERATED NOTES --->",
                "YUM YUM YUM",
            ]
        )

        self.assertEqual(release_notes_2, expected)
